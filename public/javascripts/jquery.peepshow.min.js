/*
 * jQuery Peepshow
 * Copyright 2011 ZULIUS LLC All rights reserved. 
 *
 * jQuery plugin for creating an image gallery. The plugin centers/crops/expands groups of images
 * contained in unordered list elements <li>.
 *
 * Demo: http://demos.zulius.com/jquery/peepshow
 *
 * Dev notes:
 * - An image group is simply a set of images contained within a list element <li>.
 * - Groups of images are wrapped with a relatively positioned image-wrap div for cropping/centering purposes.
 * - Auto centering wraps the entire jq-peepshow element with a relatively positioned
 *   div.jq-peepshow-auto-center so floated elements can be centered.
 * - Hover events are bound to the image-wrap div's. Public methods 'expand' and 'shrink'
 *   can be called on either the image-wrap div's or their parent li's.
 * - Expansion/shrinkage is done to the image-wrap div's.
 * - Once the image-wrap div has been added to the DOM, the plugin assumes
 *   it has no child images of class "exclude". 
 *
 *
 * @fileOverview jQuery Peepshow 
 * @author ZULIUS LLC 
 * @version 1.2.2
 */
(function ($) {
    var galleryCount = 0, data = {}, containerClass = "jq-peepshow", methods = {init:function (options) {
        var $container = this;
        var _data = {opt:$.extend({}, jQuery.fn.peepshow.defaults, options), pluginImagesPreloaded:false, interval:{id:null, length:null, firstImageLength:null}, touch:{enabled:false, $expanded:undefined, overlayFadeTimeoutId:undefined, orientationTriggered:false, ios:false, iosv:undefined}, };
        _validateOpt(_data);
        $container.addClass(containerClass);
        _touchInit(_data, $container);
        if (_data.opt.autoCenter) {
            $container.wrap($("<div></div>").addClass("jq-peepshow-auto-center"))
        }
        if (_data.opt.autoMargin) {
            _autoMargin(this, _data)
        }
        if (typeof(_data.opt.itemsPerRow) == "string" && _data.opt.itemsPerRow.toLowerCase() == "auto") {
            _autoRows(this, _data)
        }
        _setFirstImageRotationSpeed(_data);
        return this.each(function () {
            galleryCount++;
            var $this = $(this), rowItemCount = 0, $lis = $(this).children("ul").children("li");
            $this.data("jq-peepshow", _data);
            if (galleryCount == 1) {
                data = _data
            } else {
                data = {}
            }
            $lis.each(function () {
                rowItemCount++;
                if (parseInt(_data.opt.itemsPerRow)) {
                    rowItemCount = _layoutRows(this, rowItemCount, _data.opt)
                }
                _crop(this);
                var $images = $(this).find("img").not(_data.opt.excludeSelector);
                _bindLoad($images);
                _preloadPluginImages(this, _data);
                _bindExpand(this, _data)
            })
        })
    }, expand:function () {
        var _data = _getData(this);
        if (_data.touch.enabled) {
            return _touchExpand.call(this)
        }
        var $this = $(this), $imgWrap = $this.hasClass(_data.opt.wrapClass) ? $this : $this.find("." + _data.opt.wrapClass);
        if ($imgWrap.data("expanded")) {
            return
        }
        var $img = $($imgWrap.find("img").not("[thumb]")[0]), $thumb = $($imgWrap.find("img[thumb]").first()), imgW = $img.width(), imgH = $img.height(), expandDim = _applyExpansionLimits(imgW, imgH, _data.opt);
        if ($thumb.length) {
            $thumb.hide();
            $img.show().css({opacity:1})
        }
        $imgWrap.stop(true, true);
        var expandArgs = {"margin-left":"-" + ((parseInt(expandDim[0]) / 2)) + "px", "margin-top":"-" + ((parseInt(expandDim[1]) / 2)) + "px", width:expandDim[0], height:expandDim[1], top:"50%", left:"50%"};
        _setGroupMaxDim($imgWrap, expandArgs.width, expandArgs.height);
        _showOverlay({imgWrap:$imgWrap, img:$img});
        function _doneGrown(el, imgEl) {
            $(el).data("expanded", true).parent("li").addClass("expanded");
            $(imgEl).addClass("shown")
        }

        if (!_data.opt.expandSpeed) {
            $imgWrap.css(expandArgs);
            _doneGrown($imgWrap, $img);
            return
        }
        $imgWrap.animate(expandArgs, {duration:_data.opt.expandSpeed, easing:_data.opt.expandEasing, complete:function (e) {
            _doneGrown(this, $img)
        }})
    }, shrink:function () {
        _unrotate(this)
    }, destroy:function () {
        var _data = _getData(this);
        if (_data.opt.autoCenter) {
            this.unwrap()
        }
        if (_data.touch.enabled) {
            _touchShrinkUnbind(_data)
        }
        return this.find("." + _data.opt.wrapClass).each(function () {
            var $this = $(this);
            $this.unbind("mousemove" + _data.opt.hoverIntentOptions.bindNamespace + " mouseenter" + _data.opt.hoverIntentOptions.bindNamespace + " mouseleave" + _data.opt.hoverIntentOptions.bindNamespace);
            $this.removeData("expanded").removeData("displayedImageIndex").removeData("rotateState").removeData("maxDim");
            $this.find("." + _data.opt.wrapClass).unbind("load error load" + _data.opt.bindNamespace + "-center");
            $this.find(".rotate-state-button").unbind("click" + _data.opt.bindNamespace)
        })
    }};

    function _touchInit(_data, $container) {
        switch (_data.opt.touchMode) {
            case false:
                _data.touch.enabled = false;
                break;
            case true:
                _data.touch.enabled = true;
                break;
            default:
                if (typeof(_data.opt.touchMode) == "string" && _data.opt.touchMode.toLowerCase() == "auto") {
                    _data.touch.enabled = "ontouchstart" in window ? true : false
                }
                break
        }
        if (!_data.touch.enabled) {
            return
        }
        setTimeout(function () {
            window.scrollTo(0, 1)
        }, 100);
        var ua = window.navigator.userAgent;
        if (ua.match(/iphone/i) || ua.match(/ipod/i) || ua.match(/ipad/i)) {
            _data.touch.ios = true;
            if (/CPU like Mac OS X/i.test(navigator.userAgent)) {
                _data.touch.iosv = 1
            } else {
                var match;
                if ((match = /OS (\d)_\d(_\d)? like Mac OS X/i.exec(ua)) !== null) {
                    _data.touch.iosv = parseInt(match[1])
                }
            }
        }
        $container.addClass("touch")
    }

    function _validateOpt(_data) {
        if (typeof(_data.opt.itemsPerRow) == "number") {
            _data.opt.itemsPerRow = parseInt(_data.opt.itemsPerRow)
        }
        _data.opt.crop[0] = _css2num(_data.opt.crop[0]);
        _data.opt.crop[1] = _css2num(_data.opt.crop[1]);
        _data.opt.minExpansion[0] = _css2num(_data.opt.minExpansion[0]);
        _data.opt.minExpansion[1] = _css2num(_data.opt.minExpansion[1]);
        _data.opt.maxExpansion[0] = _css2num(_data.opt.maxExpansion[0]);
        _data.opt.maxExpansion[1] = _css2num(_data.opt.maxExpansion[1]);
        _data.opt.autoMarginRatio = parseFloat(_data.opt.autoMarginRatio);
        _data.opt.rotateSpeed = parseInt(_data.opt.rotateSpeed);
        if (_data.opt.crop[0] > _data.opt.minExpansion[0]) {
            _data.opt.minExpansion[0] = _data.opt.crop[0]
        }
        if (_data.opt.crop[1] > _data.opt.minExpansion[1]) {
            _data.opt.minExpansion[1] = _data.opt.crop[1]
        }
        if (_data.opt.crop[0] > _data.opt.maxExpansion[0]) {
            _data.opt.maxExpansion[0] = _data.opt.crop[0]
        }
        if (_data.opt.crop[1] > _data.opt.maxExpansion[1]) {
            _data.opt.maxExpansion[1] = _data.opt.crop[1]
        }
    }

    function _css2num(value) {
        return parseInt(value, 10) || 0
    }

    function _saveData(el, _data) {
        if (galleryCount > 1) {
            var $el = $(el);
            if (!$el.hasClass(containerClass)) {
                $el = $el.parents("." + containerClass).first()
            }
            $el.data("jq-peepshow", _data);
            return
        }
        data = _data
    }

    function _getData(el) {
        if (galleryCount > 1) {
            var $el = $(el);
            if (!$el.hasClass(containerClass)) {
                $el = $el.parents("." + containerClass).first()
            }
            var _data = $el.data("jq-peepshow");
            return _data
        }
        return data
    }

    function _autoRows(container, _data) {
        var containerParentWidth = $(container).parent().width(), $childLi = $(container).children("ul").children("li"), totalLiWidth = 0, avgLiWidth = 0, itemsPerRow = 0;
        if (!$childLi.length) {
            return false
        }
        $childLi.each(function () {
            var $this = $(this);
            totalLiWidth += _data.opt.crop[0] + _css2num($this.css("margin-right")) + _css2num($this.css("margin-left")) + _css2num($this.css("padding-right")) + _css2num($this.css("padding-left"))
        });
        avgLiWidth = totalLiWidth / $childLi.length;
        if (avgLiWidth <= 0) {
            return false
        }
        itemsPerRow = Math.floor(containerParentWidth / avgLiWidth);
        if (itemsPerRow <= 0) {
            return false
        }
        _data.opt.itemsPerRow = itemsPerRow;
        return true
    }

    function _autoMargin(container, _data) {
        var containerParentWidth = $(container).parent().width(), $childLi = $(container).children("ul").children("li"), rowLiWidth = 0, marginRight = 0, marginBottom = 0;
        if (!_data.opt.autoMarginRatio) {
            return false
        }
        if (_data.opt.crop[1]) {
            marginBottom = parseInt(_data.opt.crop[1]) * parseFloat(_data.opt.autoMarginRatio)
        }
        if (_data.opt.crop[0]) {
            marginRight = parseInt(_data.opt.crop[0]) * parseFloat(_data.opt.autoMarginRatio);
            if (parseInt(_data.opt.itemsPerRow) && _data.opt.itemsPerRow > 0) {
                for (var i = 0; i < _data.opt.itemsPerRow; i++) {
                    if (!$childLi[i]) {
                        continue
                    }
                    var $li = $($childLi[i]);
                    rowLiWidth += parseInt(_data.opt.crop[0]) + _css2num($li.css("padding-left")) + _css2num($li.css("padding-right"))
                }
                var marginRightRow = marginRight * (_data.opt.itemsPerRow - 1);
                rowLiWidth += marginRightRow;
                if (rowLiWidth > containerParentWidth) {
                    marginRight = (marginRightRow - (rowLiWidth - containerParentWidth)) / (_data.opt.itemsPerRow - 1);
                    if (marginRight < 1) {
                        marginRight = 1
                    }
                    marginBottom = marginRight
                }
            }
        }
        if (marginRight) {
            $childLi.css("margin-right", marginRight)
        }
        if (marginBottom) {
            $childLi.css("margin-bottom", marginBottom)
        }
    }

    function _layoutRows(el, rowItemCount, opt) {
        if (rowItemCount == 1 || (rowItemCount == (opt.itemsPerRow + 1))) {
            $(el).addClass("first")
        }
        if (rowItemCount == opt.itemsPerRow) {
            $(el).addClass("last");
            rowItemCount = 0
        }
        return rowItemCount
    }

    function _touchUpdateOverlayCount(arg, _data) {
        arg = $.extend({}, {current:undefined, total:undefined, imgWrap:_data.touch.$expanded}, arg);
        var $overlayTop = arg.imgWrap.find(".overlay.top:first");
        if (typeof(arg.current) == "undefined") {
            arg.current = arg.imgWrap.data("humanStep");
            if (typeof(arg.current) == "undefined") {
                arg.current = 1
            }
        }
        if (typeof(arg.total) == "undefined") {
            arg.total = arg.imgWrap.find("img").not("[thumb]").length
        }
        var countText = arg.current + "/" + arg.total;
        arg.imgWrap.find(".overlay.top:first .count:first").text(countText)
    }

    function _showOverlay(arg) {
        arg = $.extend({}, {showTop:false, forceBottom:undefined, img:undefined, imgWrap:undefined, fadeOutTopAfter:2000}, arg);
        var $imgWrap = $(arg.imgWrap), _data = _getData($imgWrap);
        if (arg.forceBottom == undefined) {
            arg.forceBottom = _data.opt.playPauseButton
        }
        if (arg.img == undefined) {
            var displayedImageIndex = $imgWrap.data("displayedImageIndex");
            arg.img = $($imgWrap.find("img")[displayedImageIndex])
        }
        var $overlayTop = $imgWrap.children(".overlay.top");
        $overlayBottom = $imgWrap.children(".overlay.bottom"), text = $(arg.img).attr(_data.opt.captionAttribute);
        if (!arg.forceBottom && (!text || typeof(text) != "string" || !text.length)) {
            if ($overlayBottom.is(":visible")) {
                $overlayBottom.fadeOut("fast")
            }
        } else {
            $overlayBottom.children("span").text(text);
            if ($.browser.msie) {
                $overlayBottom.css("filter", $overlayBottom.css("filter"))
            }
            if (!$overlayBottom.is(":visible")) {
                $overlayBottom.fadeIn(_getTransitionSpeed($imgWrap))
            }
        }
        if (_data.touch.enabled && arg.showTop) {
            clearTimeout(_data.touch.overlayFadeTimeoutId);
            $overlayTop.fadeIn(_getTransitionSpeed($imgWrap));
            if (arg.fadeOutTopAfter) {
                _data.touch.overlayFadeTimeoutId = setTimeout(function () {
                    if ($overlayTop.is(":visible")) {
                        $overlayTop.fadeOut("fast")
                    }
                }, arg.fadeOutTopAfter);
                _saveData($imgWrap, _data)
            }
        }
    }

    function _hideOverlay(imgWrap) {
        $(imgWrap).children(".overlay").hide()
    }

    function _bindExpand(liEl, _data) {
        if (_data.opt.bindNamespace) {
            _data.opt.hoverIntentOptions.bindNamespace = _data.opt.bindNamespace + "-hover"
        }
        _data.opt.hoverIntentOptions.over = function (e) {
            $(this).peepshow("expand");
            _rotate(this)
        };
        _data.opt.hoverIntentOptions.out = function (e) {
            $(this).peepshow("shrink")
        };
        return $(liEl).children("." + _data.opt.wrapClass).each(function () {
            var $imgWrap = $(this);
            if (!$imgWrap.find("img").length) {
                return
            }
            if (_data.touch.enabled) {
                var $anchors = $imgWrap.find("a").has("img").not(_data.opt.excludeSelector);
                $anchors.each(function () {
                    var $this = $(this), clickEvents = [], boundEvents = $this.data("events"), onclick = $this.attr("onclick");
                    if (onclick) {
                        $this.data("onclickEvent", onclick);
                        $this.removeAttr("onclick")
                    }
                    if (boundEvents && boundEvents.click) {
                        $.each(events.click, function () {
                            clickEvents.push(this)
                        });
                        $this.unbind("click")
                    }
                    if (!clickEvents.length) {
                        return
                    }
                    $this.data("boundClickEvents", clickEvents)
                });
                $imgWrap.bind("click" + _data.opt.bindNamespace, function (e) {
                    if (e != undefined) {
                        e.preventDefault()
                    }
                    if ($(this).data("expanded")) {
                        return
                    }
                    _touchExpand.call(this);
                    _rotate(this);
                    return false
                });
                return
            }
            $imgWrap.hoverIntent(_data.opt.hoverIntentOptions)
        })
    }

    function _setFirstImageRotationSpeed(_data) {
        var ratio = 2.5, firstImageInterval = parseInt(_data.opt.rotateSpeed - (ratio * _data.opt.hoverIntentOptions.interval));
        _data.interval.firstImageLength = firstImageInterval > _data.opt.hoverIntentOptions.interval ? firstImageInterval : _data.opt.rotateSpeed
    }

    function _rotate($imgWrap) {
        var $this = $(this), $imgWrap = $($imgWrap), _data = _getData($imgWrap);
        $imgWrap = $imgWrap.hasClass(_data.opt.wrapClass) ? $imgWrap : $imgWrap.find("." + _data.opt.wrapClass);
        var $allImages = $imgWrap.find("img");
        if (_data.interval.id != null) {
            _unrotate($imgWrap);
            return
        }
        if ($allImages.length < 2) {
            return
        }
        _setRotateState($imgWrap, "play", $imgWrap.children(".overlay").children(".rotate-state-button"));
        _data.interval.length = _data.interval.firstImageLength;
        _data.interval.id = setInterval(function () {
            if (_getRotateState($imgWrap) == "pause") {
                return
            }
            if (_data.interval.length == _data.interval.firstImageLength) {
                _data.interval.length = parseInt(_data.opt.rotateSpeed);
                clearTimeout(_data.interval.id);
                _data.interval.id = setInterval(arguments.callee, _data.interval.length);
                _saveData($imgWrap, _data)
            }
            var index = $imgWrap.data("displayedImageIndex"), nextIndex, $shown, $next, humanStep = $imgWrap.data("humanStep");
            if (index == undefined) {
                index = 0
            }
            $shown = $($allImages[index]);
            if (!!$shown.attr("thumb")) {
                index = ($allImages[index + 1] == undefined) ? 0 : index + 1;
                $shown = $($allImages[index]);
                if (!!$shown.attr("thumb")) {
                    return
                }
                $imgWrap.data("displayedImageIndex", index)
            }
            nextIndex = ($allImages[index + 1] == undefined) ? 0 : index + 1;
            $next = $($allImages[nextIndex]);
            if (!!$next.attr("thumb")) {
                nextIndex = ($allImages[nextIndex + 1] == undefined) ? 0 : nextIndex + 1;
                $next = $($allImages[nextIndex])
            }
            if (nextIndex < index) {
                humanStep = 1
            } else {
                humanStep++
            }
            if (!$next.attr("complete")) {
                if (_data.opt.showLoader && (_data.opt.playPauseButton)) {
                    _showNextLoader($imgWrap);
                    return
                }
            }
            $shown.addClass("last-shown");
            $next.css({opacity:0, display:"inline"}).addClass("shown");
            $imgWrap.data({displayedImageIndex:nextIndex, humanStep:humanStep});
            if (_data.touch.enabled) {
                _touchUpdateOverlayCount({imgWrap:$imgWrap}, _data);
                _showOverlay({imgWrap:$imgWrap, fadeOutTopAfter:0, img:$next, showTop:false});
                _touchPositionExpanded({imgWrap:$imgWrap, fade:false, callback:function () {
                    _transitionImages($shown, $next, $imgWrap)
                }}, _data)
            } else {
                _showOverlay({imgWrap:$imgWrap, img:$next});
                _expandResize($imgWrap, $next, function () {
                    _transitionImages($shown, $next, $imgWrap)
                })
            }
        }, _data.interval.length);
        _saveData($imgWrap, _data)
    }

    function _transitionImages($shown, $next, $imgWrap) {
        var _data = _getData($imgWrap);
        if (!_data.opt.transitionEffect || (typeof(_data.opt.transitionEffect) != "string") || _data.opt.transitionEffect.toLowerCase() == "none") {
            $shown.css({opacity:0}).removeClass("shown last-shown");
            $next.css({opacity:1});
            return
        }
        var speed = _getTransitionSpeed($imgWrap);
        switch (_data.opt.transition) {
            case"fade":
            default:
                $next.animate({opacity:1}, speed, function () {
                    $shown.removeClass("shown last-shown")
                });
                $shown.animate({opacity:0}, speed);
                break
        }
    }

    function _setRotateState(imgWrap, state, button) {
        $(imgWrap).data("rotateState", state);
        if (button != undefined) {
            if (state == "pause") {
                $(button).addClass("paused");
                return
            }
            $(button).removeClass("paused")
        }
    }

    function _getRotateState(imgWrap) {
        return $(imgWrap).data("rotateState")
    }

    function _flipRotateState(imgWrap, button) {
        if (_getRotateState(imgWrap) == "play") {
            _setRotateState(imgWrap, "pause", button);
            return
        }
        _setRotateState(imgWrap, "play", button)
    }

    function _getTransitionSpeed($el) {
        var speed = 300, _data = _getData($el || this);
        if (_data.opt.transitionEffectSpeedRatio && _data.opt.rotateSpeed) {
            speed = _data.opt.transitionEffectSpeedRatio * _data.opt.rotateSpeed
        }
        return speed
    }

    function _unrotate($imgWrap) {
        var $this = (this), $imgWrap = $($imgWrap), _data = _getData($imgWrap);
        $imgWrap = $imgWrap.hasClass(_data.opt.wrapClass) ? $imgWrap : $imgWrap.find("." + _data.opt.wrapClass);
        clearInterval(_data.interval.id);
        _data.interval.id = null;
        var $allImages = $imgWrap.find("img");
        $imgWrap.stop(true, true);
        $allImages.stop(false, true).removeClass("last-shown shown").css({opacity:0});
        var $shown = $allImages.first();
        $shown.css({opacity:1, display:"inline", "z-index":1});
        $imgWrap.data("displayedImageIndex", 0);
        _shrink($imgWrap)
    }

    function _shrink(imgWrap) {
        var $imgWrap = $(imgWrap), _data = _getData($imgWrap);
        if (!$imgWrap.data("expanded")) {
            return
        }
        var shrinkArgs = {position:"absolute", left:0, top:0, width:"100%", height:"100%", "margin-top":0, "margin-left":0};
        $imgWrap.stop(true, true);
        if (_data.touch.enabled) {
            var $imgs = $imgWrap.find("img");
            $imgs.each(function () {
                var $img = $(this), origDim = $img.data("origDim");
                $img.removeClass("shown");
                if (origDim != undefined && origDim.length == 2) {
                    $img.css({width:origDim[0], height:origDim[1]})
                }
            });
            $imgWrap.css(shrinkArgs);
            _center($imgs[0]);
            _touchShrinkUnbind.call($imgWrap, _data)
        } else {
            if (!_data.opt.shrinkSpeed) {
                $imgWrap.css(shrinkArgs).find("img").removeClass("shown")
            } else {
                $imgWrap.stop(true, true).animate(shrinkArgs, {duration:_data.opt.shrinkSpeed, easing:_data.opt.shrinkEasing, complete:function () {
                    $(this).find("img").removeClass("shown")
                }})
            }
        }
        _hideOverlay(imgWrap);
        $imgWrap.data({expanded:false, displayedImageIndex:0}).removeData("maxDim").parent("li").removeClass("expanded")
    }

    function _setGroupMaxDim(imgWrap, width, height) {
        var $imgWrap = $(imgWrap), maxDim = $imgWrap.data("maxDim"), updateMaxDim = false;
        if (maxDim == undefined) {
            $imgWrap.data("maxDim", [width, height]);
            return
        }
        if (width > maxDim[0]) {
            maxDim[0] = width;
            updateMaxDim = true
        }
        if (height > maxDim[1]) {
            maxDim[1] = height;
            updateMaxDim = true
        }
        if (!updateMaxDim) {
            return
        }
        $imgWrap.data("maxDim", maxDim)
    }

    function _preloadPluginImages(el, _data) {
        if (_data.pluginImagesPreloaded) {
            return false
        }
        var preload = [], $imgWrap = $(el).children("." + _data.opt.wrapClass).first(), spinnerSrc = $imgWrap.css("background-image");
        if (spinnerSrc) {
            spinnerSrc = spinnerSrc.replace(/"/g, "").replace(/url\(|\)$/ig, "");
            preload.push(spinnerSrc)
        }
        for (var i = 0, len = preload.length; i < len; ++i) {
            if (typeof(preload[i]) != "string" || preload[i].toLowerCase() == "none") {
                continue
            }
            $("<img/>")[0].src = preload[i]
        }
        _data.pluginImagesPreloaded = true
    }

    function _bindLoad(images) {
        $(images).each(function () {
            if (this.complete) {
                _display(this);
                return
            }
            $(this).one("load",function (e) {
                _display(this)
            }).one("error", _displayErrorImg)
        })
    }

    function _displayErrorImg(e) {
        var $this = $(this), _data = _getData($this);
        if (this.src == _data.opt.imageNotFound) {
            return false
        }
        var origSrc = $(this).attr("src");
        $this.attr({"orig-src":origSrc, src:_data.opt.imageNotFound});
        if ($this.attr("complete")) {
            _display(this);
            return true
        }
        $(this).one("load", function (e) {
            _display(this)
        });
        return true
    }

    function _display(images) {
        var $images = $(images), _data = _getData($images);
        return $images.each(function () {
            var $this = $(this);
            $this.unbind("load");
            _center(this);
            _hideNextLoader($this.closest("." + _data.opt.wrapClass));
            if (!$this.siblings().length && $this.parent("a").length) {
                if (!$this.parent("a").prev().length) {
                    $this.css("display", "inline");
                    _hideBgLoader(this)
                }
                return
            }
            if (!$this.prev().length) {
                $this.css("display", "inline");
                _hideBgLoader(this)
            }
        })
    }

    function _showNextLoader(imageWrap) {
        $(imageWrap).children(".overlay").children(".rotate-state-button").addClass("loading")
    }

    function _hideNextLoader(imageWrap) {
        $(imageWrap).children(".overlay").children(".rotate-state-button").removeClass("loading")
    }

    function _hideBgLoader(el) {
        var $el = $(el), _data = _getData($el);
        if (!$el.hasClass(_data.opt.wrapClass)) {
            $el.closest("." + _data.opt.wrapClass).removeClass("loading");
            return
        }
        $el.removeClass("loading")
    }

    function _crop(el) {
        var $el = $(el), _data = _getData($el);
        $el.css({width:_data.opt.crop[0], height:_data.opt.crop[1]});
        if ($el.children("." + _data.opt.wrapClass).length) {
            return
        }
        var $imgWrap = $("<div></div>"), imgWrapClass = _data.opt.wrapClass, $imgs = $el.find("img").not(_data.opt.excludeSelector), $anchors = $el.find("a").has("img").not(_data.opt.excludeSelector);
        if (_data.opt.roundCorners) {
            imgWrapClass += " round"
        }
        if (_data.opt.showLoader) {
            imgWrapClass = imgWrapClass + " loading"
        }
        $imgWrap.attr({"class":imgWrapClass});
        if ($anchors.length) {
            $anchors.wrapAll($imgWrap)
        } else {
            $imgs.wrapAll($imgWrap)
        }
        var countText = $imgs.not("[thumb]").length ? "1/" + $imgs.not("[thumb]").length : "", $overlayTop = $('<div class="overlay top"><a class="back" href="">&#9664&nbsp;&nbsp;Back</a><div class="count">' + countText + "</div></div>").css("display", "none"), $overlayBottom = $('<div class="overlay bottom"></div>').css("display", "none"), $spanText = $("<span></span>");
        $overlayBottom.append($spanText);
        if (_data.opt.playPauseButton) {
            var button = $('<a title="pause"></a>').addClass("rotate-state-button");
            $overlayBottom.append(button)
        }
        $overlayBottom.append($spanText);
        $imgWrap = $el.children("." + _data.opt.wrapClass);
        $imgWrap.append($overlayTop, $overlayBottom);
        if (_data.opt.playPauseButton && !_data.touch.enabled) {
            $imgWrap.children(".overlay.bottom").children(".rotate-state-button").bind("click" + _data.opt.bindNamespace, _playPause)
        }
    }

    function _playPause(e) {
        if (e != undefined) {
            e.preventDefault()
        }
        var _data = _getData(e.target);
        if (_data.opt.showLoader && $(this).hasClass("loading")) {
            return false
        }
        _flipRotateState($(this).parents("." + _data.opt.wrapClass), this);
        return false
    }

    function _center(img) {
        return $(img).each(function () {
            var $this = $(this), width = $this.width(), height = $this.height();
            $this.css({"margin-top":"-" + (parseInt(height) / 2) + "px", "margin-left":"-" + (parseInt(width) / 2) + "px", top:"50%", left:"50%"})
        })
    }

    function _uncenter() {
        return this.each(function () {
            $(this).css({"margin-top":0, "margin-left":0, left:0, top:0})
        })
    }

    function _expandResize(imgWrap, img, cb) {
        var $imgWrap = $(imgWrap), _data = _getData($imgWrap), $img = $(img), imgW = $img.width(), imgH = $img.height(), imageWrapW = $imgWrap.width(), imageWrapH = $imgWrap.height(), __done = typeof cb === "function" ? cb : undefined;
        if (_data.opt.retainMaxExpansion && maxDim && (maxDim[0] <= imgWrapW) && (maxDim[1] <= imgWrapH)) {
            if (__done !== undefined) {
                __done()
            }
            return
        }
        var mleft = imgW, mtop = imgH, expandArgs = {"margin-top":0, "margin-left":0, top:"50%", left:"50%", width:imgW, height:imgH};
        if (_data.opt.retainMaxExpansion) {
            var maxDim = $imgWrap.data("maxDim"), setMaxDim = false;
            if (maxDim == undefined || maxDim.length != 2) {
                setMaxDim = true
            } else {
                if (maxDim[0] > expandArgs.width) {
                    expandArgs.width = maxDim[0];
                    mleft = maxDim[0]
                } else {
                    setMaxDim = true
                }
                if (maxDim[1] > expandArgs.height) {
                    expandArgs.height = maxDim[1];
                    mtop = maxDim[1]
                } else {
                    setMaxDim = true
                }
            }
            if (setMaxDim) {
                _setGroupMaxDim($imgWrap, expandArgs.width, expandArgs.height)
            }
        }
        var expandDim = _applyExpansionLimits(expandArgs.width, expandArgs.height, _data.opt);
        expandArgs.width = expandDim[0];
        mleft = expandDim[0];
        expandArgs.height = expandDim[1];
        mtop = expandDim[1];
        expandArgs["margin-left"] = "-" + (parseInt(mleft) / 2) + "px";
        expandArgs["margin-top"] = "-" + (parseInt(mtop) / 2) + "px";
        $imgWrap.stop(true, true);
        if (!_data.opt.expandSpeed) {
            $imgWrap.css(expandArgs);
            if (__done !== undefined) {
                __done()
            }
            return
        }
        $imgWrap.animate(expandArgs, {duration:_data.opt.expandSpeed, easing:_data.opt.expandEasing, complete:function () {
            if (__done !== undefined) {
                __done()
            }
        }})
    }

    function _applyExpansionLimits(width, height, opt) {
        if (width < opt.minExpansion[0]) {
            width = opt.minExpansion[0]
        } else {
            if (width > opt.maxExpansion[0]) {
                width = opt.maxExpansion[0]
            }
        }
        if (height < opt.minExpansion[1]) {
            height = opt.minExpansion[1]
        } else {
            if (height > opt.maxExpansion[1]) {
                height = opt.maxExpansion[1]
            }
        }
        return[width, height]
    }

    function _touchExpanded($imgWrap, e) {
        if (e != undefined) {
            e.preventDefault()
        }
        var $target = $(e.target), $overlayTop = $imgWrap.children(".overlay.top");
        switch (true) {
            case ($target.hasClass("rotate-state-button")):
                _playPause.call($target, e);
                var state = _getRotateState($imgWrap), oarg = {imgWrap:$imgWrap, showTop:true, fadeOutTopAfter:0};
                if (state == "play") {
                    delete (oarg.fadeOutTopAfter)
                }
                _showOverlay(oarg);
                return;
            case ($target.hasClass("back")):
                return _unrotate($imgWrap);
            case ($overlayTop.is(":visible") && $target.attr("nodeName").toLowerCase() == "img"):
                var $a = $target.parent("a");
                if ($a.length) {
                    var onclick = $a.data("onclickEvent"), href = $a.attr("href"), target = $a.attr("target");
                    if (onclick) {
                        eval("(function(){" + onclick + "}); onclick();")
                    }
                    var clickEvents = $a.data("clickEvents");
                    if (clickEvents != undefined && clickEvents.length) {
                        for (var i = 0; i < clickEvents.length; $i++) {
                            $a.trigger(clickEvents[i])
                        }
                    }
                    if (href && !href.match(/^\s*javascript:/i)) {
                        if (target && target.toLowerCase() == "_blank") {
                            window.open(href, "_self")
                        } else {
                            window.location.replace(href)
                        }
                        _unrotate($imgWrap)
                    }
                }
                return
        }
        if (_getRotateState($imgWrap) == "pause") {
            return
        }
        _showOverlay({imgWrap:$imgWrap, showTop:true})
    }

    function _touchExpand() {
        var $this = $(this), _data = _getData($this), $imgWrap = $this.hasClass(_data.opt.wrapClass) ? $this : $this.find("." + _data.opt.wrapClass);
        if ($imgWrap.data("expanded")) {
            return
        }
        _data.touch.$expanded = $imgWrap;
        _saveData($imgWrap, _data);
        var dii = 0, $thumb = $imgWrap.find("img[thumb]").first();
        if ($thumb.length) {
            var $img = $imgWrap.find("img").not("[thumb]").first();
            if ($img.length) {
                $thumb.hide();
                dii++;
                $img.show().css({opacity:1})
            }
        }
        $imgWrap.data({expanded:true, displayedImageIndex:dii, humanStep:1}).parent("li").addClass("expanded");
        $("body").css("overflow", "hidden");
        try {
            $("body").bind("touchstart" + _data.opt.bindNamespace, function (e) {
                return _touchExpanded.call(this, $imgWrap, e)
            })
        } catch (err) {
        }
        _showOverlay({imgWrap:$imgWrap, showTop:true});
        _touchPositionExpanded.call({imgWrap:$imgWrap}, {}, _data);
        $(window).bind("orientationchange" + _data.opt.bindNamespace,function (e) {
            _data.touch.orientationTriggered = true;
            _saveData($imgWrap, _data);
            _touchPositionExpanded({fade:false}, _data);
            setTimeout(function () {
                _data.touch.orientationTriggered = false;
                _saveData($imgWrap, _data)
            }, 500)
        }).bind("scroll" + _data.opt.bindNamespace, function (e) {
                if (_data.touch.orientationTriggered) {
                    _data.touch.orientationTriggered = false;
                    _saveData($imgWrap, _data);
                    return
                }
                if (!_data.touch.ios) {
                    return
                }
                if ($(window).scrollTop() == 0) {
                    return _unrotate($imgWrap)
                }
            })
    }

    function _touchPositionExpanded(arg, _data) {
        arg = $.extend({}, {imgWrap:_data.touch.$expanded, fade:true, callback:undefined}, arg);
        var dii = arg.imgWrap.data("displayedImageIndex") ? arg.imgWrap.data("displayedImageIndex") : 0, $allImg = $(arg.imgWrap.find("img")), $img = $($allImg[dii]);
        var vw = window.innerWidth, vh = window.innerHeight, iOrigDim = $img.data("origDim"), iw = iOrigDim == undefined ? $img.width() : iOrigDim[0], ih = iOrigDim == undefined ? $img.height() : iOrigDim[1], expandTop = 0, expandLeft = 0;
        if (iOrigDim == undefined) {
            $img.data("origDim", [iw, ih])
        }
        if (vw < iw) {
            iw = vw;
            ih = "auto"
        } else {
            if (vh < ih) {
                ih = vh;
                iw = "auto"
            }
        }
        if (_data.touch.ios && (typeof(_data.touch.iosv) == "undefined" || _data.touch.iosv < 5)) {
            expandTop = window.pageYOffset;
            expandLeft = window.pageXOffset
        }
        var cssArgs = {position:"fixed", width:vw, height:vh, top:expandTop, left:expandLeft, };
        if (arg.fade) {
            cssArgs.opacity = 0.4
        }
        arg.imgWrap.css(cssArgs);
        if (arg.fade) {
            arg.imgWrap.animate({opacity:1}, "fast")
        }
        $img.css({width:iw, height:ih, position:"absolute"});
        iw = $img.width();
        ih = $img.height();
        $img.css({"margin-left":"-" + ((parseInt(iw) / 2)) + "px", "margin-top":"-" + ((parseInt(ih) / 2)) + "px", top:"50%", left:"50%"});
        if (typeof(arg.callback) == "function") {
            arg.callback()
        }
    }

    function _touchShrinkUnbind(_data) {
        $(window).unbind("orientationchange" + _data.opt.bindNamespace).unbind("scroll" + _data.opt.bindNamespace);
        $("body").css("overflow", "auto").unbind("touchstart" + _data.opt.bindNamespace);
        if ($(this).hasClass(_data.opt.wrapClass)) {
            _touchUpdateOverlayCount({imgWrap:this, current:1}, _data);
            $(this).data("humanStep", 1)
        }
    }

    jQuery.fn.peepshow = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1))
        } else {
            if (typeof method === "object" || !method) {
                return methods.init.apply(this, arguments)
            } else {
                $.error("Method " + method + " does not exist on jQuery.peepshow")
            }
        }
    };
    jQuery.fn.peepshow.defaults = {autoCenter:true, autoMargin:true, autoMarginRatio:0.25, bindNamespace:".jq-peepshow", captionAttribute:"caption", crop:[200, 200], excludeSelector:"img.exclude", expandEasing:"swing", expandSpeed:0, hoverIntentOptions:{sensitivity:9, interval:100, timeout:0}, imageNotFound:"img/image-not-found.jpg", itemsPerRow:3, maxExpansion:[500, 500], minExpansion:[300, 300], playPauseButton:false, retainMaxExpansion:true, rotateSpeed:1700, roundCorners:false, showLoader:true, shrinkEasing:"swing", shrinkSpeed:0, touchMode:"auto", transitionEffect:"fade", transitionEffectSpeedRatio:0.27, wrapClass:"image-wrap"}
})(jQuery);
/*
 * hoverIntent is similar to jQuery's built-in "hover" function except that
 * instead of firing the onMouseOver event immediately, hoverIntent checks
 * to see if the user's mouse has slowed down (beneath the sensitivity
 * threshold) before firing the onMouseOver event.
 *
 * hoverIntent r6 // 2011.02.26 // jQuery 1.5.1+
 * <http://cherne.net/brian/resources/jquery.hoverIntent.html>
 *
 * hoverIntent is currently available for use in all personal or commercial
 * projects under both MIT and GPL licenses. This means that you can choose
 * the license that best suits your project, and use it accordingly.
 *
 * // basic usage (just like .hover) receives onMouseOver and onMouseOut functions
 * $("ul li").hoverIntent( showNav , hideNav );
 *
 * // advanced usage receives configuration object only
 * $("ul li").hoverIntent({
 *   sensitivity: 7, // number = sensitivity threshold (must be 1 or higher)
 *   interval: 100,   // number = milliseconds of polling interval
 *   over: showNav,  // function = onMouseOver callback (required)
 *   timeout: 0,   // number = milliseconds delay before onMouseOut function call
 *   out: hideNav    // function = onMouseOut callback (required)
 * });
 *
 * @param  f  onMouseOver function || An object with configuration options
 * @param  g  onMouseOut function  || Nothing (use configuration options object)
 * @author    Brian Cherne brian(at)cherne(dot)net
 * @modifiedBy  Timbo White, ZULIUS LLC
 *
 *
 */
(function ($) {
    $.fn.hoverIntent = function (f, g) {
        var cfg = {sensitivity:7, interval:100, timeout:0, bindNamespace:".hoverIntent"};
        cfg = $.extend(cfg, g ? {over:f, out:g} : f);
        var cX, cY, pX, pY;
        var track = function (ev) {
            cX = ev.pageX;
            cY = ev.pageY
        };
        var compare = function (ev, ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            if ((Math.abs(pX - cX) + Math.abs(pY - cY)) < cfg.sensitivity) {
                $(ob).unbind("mousemove" + cfg.bindNamespace, track);
                ob.hoverIntent_s = 1;
                return cfg.over.apply(ob, [ev])
            } else {
                pX = cX;
                pY = cY;
                ob.hoverIntent_t = setTimeout(function () {
                    compare(ev, ob)
                }, cfg.interval)
            }
        };
        var delay = function (ev, ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            ob.hoverIntent_s = 0;
            return cfg.out.apply(ob, [ev])
        };
        var handleHover = function (e) {
            var ev = jQuery.extend({}, e);
            var ob = this;
            if (ob.hoverIntent_t) {
                ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t)
            }
            if (e.type == "mouseenter") {
                pX = ev.pageX;
                pY = ev.pageY;
                $(ob).bind("mousemove" + cfg.bindNamespace, track);
                if (ob.hoverIntent_s != 1) {
                    ob.hoverIntent_t = setTimeout(function () {
                        compare(ev, ob)
                    }, cfg.interval)
                }
            } else {
                $(ob).unbind("mousemove" + cfg.bindNamespace, track);
                if (ob.hoverIntent_s == 1) {
                    ob.hoverIntent_t = setTimeout(function () {
                        delay(ev, ob)
                    }, cfg.timeout)
                }
            }
        };
        return this.bind("mouseenter" + cfg.bindNamespace, handleHover).bind("mouseleave" + cfg.bindNamespace, handleHover)
    }
})(jQuery);